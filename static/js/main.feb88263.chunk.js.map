{"version":3,"sources":["screens/About.js","screens/Contact.js","components/HomeTile.js","screens/Home.js","screens/Tech.js","screens/Work.js","components/App.js","serviceWorker.js","index.js"],"names":["About","react_default","a","createElement","Component","Contact","Link","to","HomeTile","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isHovered","handleHover","bind","assertThisInitialized","openTile","props","className","setState","name","tileClasses","onMouseEnter","onMouseLeave","onClick","title","subTitle","Home","console","log","src_components_HomeTile","Tech","Work","App","HashRouter","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.feb88263.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass About extends Component {\n\n  componentDidMount() {\n\n  }\n\n  componentWillUnmount() {\n\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>About</h1>\n      </div>\n    );\n  }\n}\n\nexport default About;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Contact extends Component {\n\n  componentDidMount() {\n\n  }\n\n  componentWillUnmount() {\n\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Contact</h1>\n        <Link to='/'>Link to Home</Link>\n      </div>\n    );\n  }\n}\n\nexport default Contact;","import React, { Component } from 'react';\n\nimport './HomeTile.css';\n\nclass HomeTile extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      isHovered: false\n    };\n    this.handleHover = this.handleHover.bind(this);\n    this.openTile = this.openTile.bind(this);\n  }\n\n  componentDidMount() {\n\n  }\n\n  componentWillUnmount() {\n\n  }\n\n  handleHover(){\n    if (this.props.className === 'about' ||\n        this.props.className === 'work' ||\n        this.props.className === 'tech' ||\n        this.props.className === 'contact') {\n      this.setState({ isHovered: !this.state.isHovered})\n    }\n  }\n\n  openTile(name) {\n    this.props.openTile(name);\n  }\n\n  render() {\n    const tileClasses = this.props.className + (this.state.isHovered ? \" is-hovered\" : \"\");\n    return (\n      <div className={ tileClasses }\n           onMouseEnter={ this.handleHover }\n           onMouseLeave={ this.handleHover }\n           onClick={ this.openTile(this.props.title) }>\n          <div className=\"tile-title\">\n            <div>{ this.props.title }</div>\n            { this.props.subTitle ? <div>{ this.props.subTitle }</div> : '' }\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default HomeTile;","import React, { Component } from 'react';\n\nimport '../components/HomeTile';\nimport './Home.css';\nimport HomeTile from \"../components/HomeTile\";\n\nclass Home extends Component {\n\n  constructor() {\n    super();\n\n    this.openTile = this.openTile.bind(this);\n  }\n\n  componentDidMount() {\n\n  }\n\n  componentWillUnmount() {\n\n  }\n\n  openTile(name){\n    console.log('PARENT - Name should be what i clicked');\n    console.log(name);\n  }\n\n  render() {\n    return (\n      <div className=\"page-wrapper\">\n        <div className=\"grid-container\">\n          <HomeTile className=\"name\"\n                    title=\"TOM HAYNSWORTH\"\n                    subTitle=\"SOFTWARE DEVELOPER\"\n                    openTile={this.openTile}/>\n          <HomeTile className=\"about\"\n                    title=\"ABOUT\"\n                    openTile={this.openTile}/>\n          <HomeTile className=\"work\"\n                    title=\"WORK\"\n                    openTile={this.openTile}/>\n          <HomeTile className=\"tech\"\n                    title=\"TECH\"\n                    openTile={this.openTile}/>\n          <HomeTile className=\"contact\"\n                    title=\"CONTACT\"\n                    openTile={this.openTile}/>\n          <HomeTile className=\"resume\"\n                    title=\"RES\"\n                    subTitle=\"UME\"\n                    openTile={this.openTile}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Tech extends Component {\n\n  componentDidMount() {\n\n  }\n\n  componentWillUnmount() {\n\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Tech</h1>\n        <Link to='/'>Link to Home</Link>\n      </div>\n    );\n  }\n}\n\nexport default Tech;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Work extends Component {\n\n  componentDidMount() {\n\n  }\n\n  componentWillUnmount() {\n\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Work</h1>\n        <Link to='/'>Link to Home</Link>\n      </div>\n    );\n  }\n}\n\nexport default Work;","import React, { Component } from 'react';\nimport { HashRouter, Route } from 'react-router-dom';\n\nimport About from '../screens/About';\nimport Contact from '../screens/Contact';\nimport Home from '../screens/Home';\nimport Tech from '../screens/Tech';\nimport Work from '../screens/Work';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <HashRouter>\n        <div>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/contact\" component={Contact} />\n          <Route path=\"/tech\" component={Tech} />\n          <Route path=\"/work\" component={Work} />\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}