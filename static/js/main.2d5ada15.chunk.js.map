{"version":3,"sources":["screens/About.js","screens/Contact.js","components/HomeTile.js","screens/Home.js","screens/Tech.js","screens/Work.js","components/App.js","serviceWorker.js","index.js"],"names":["About","react_default","a","createElement","Component","Contact","Link","to","HomeTile","className","this","props","name","Home","src_components_HomeTile","Tech","Work","App","HashRouter","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wTAqBeA,gRARX,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,2BAbYC,qBCqBLC,gRATX,OACEJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,GAAG,KAAT,wBAdcH,aCoBPI,uRARX,OACEP,EAAAC,EAAAC,cAAA,OAAKM,UAAYC,KAAKC,MAAMF,WAC1BR,EAAAC,EAAAC,cAAA,OAAKM,UAAU,cAAeC,KAAKC,MAAMC,cAb1BR,cC2BRS,uRAdX,OACEZ,EAAAC,EAAAC,cAAA,OAAKM,UAAU,gBACbR,EAAAC,EAAAC,cAAA,OAAKM,UAAU,kBACbR,EAAAC,EAAAC,cAACW,EAAD,CAAUL,UAAU,QAAQG,KAAK,UACjCX,EAAAC,EAAAC,cAACW,EAAD,CAAUL,UAAU,WAAWG,KAAK,aACpCX,EAAAC,EAAAC,cAACW,EAAD,CAAUL,UAAU,OAAOG,KAAK,SAChCX,EAAAC,EAAAC,cAACW,EAAD,CAAUL,UAAU,UAAUG,KAAK,YACnCX,EAAAC,EAAAC,cAACW,EAAD,CAAUL,UAAU,SAASG,KAAK,oBAlBzBR,cCiBJW,gRATX,OACEd,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,GAAG,KAAT,wBAdWH,aCoBJY,gRATX,OACEf,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,GAAG,KAAT,wBAdWH,aCuBJa,0LAdX,OACEhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACEjB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWT,IACjCZ,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOE,KAAK,SAASC,UAAWtB,IAChCC,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOE,KAAK,WAAWC,UAAWjB,IAClCJ,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOE,KAAK,QAAQC,UAAWP,IAC/Bd,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOE,KAAK,QAAQC,UAAWN,aATvBZ,cCEEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2d5ada15.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass About extends Component {\n\n  componentDidMount() {\n\n  }\n\n  componentWillUnmount() {\n\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>About</h1>\n      </div>\n    );\n  }\n}\n\nexport default About;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Contact extends Component {\n\n  componentDidMount() {\n\n  }\n\n  componentWillUnmount() {\n\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Contact</h1>\n        <Link to='/'>Link to Home</Link>\n      </div>\n    );\n  }\n}\n\nexport default Contact;","import React, { Component } from 'react';\n\nimport './HomeTile.css';\n\nclass HomeTile extends Component {\n\n  componentDidMount() {\n\n  }\n\n  componentWillUnmount() {\n\n  }\n\n  render() {\n    return (\n      <div className={ this.props.className }>\n        <div className=\"tile-title\">{ this.props.name }</div>\n      </div>\n    );\n  }\n}\n\nexport default HomeTile;","import React, { Component } from 'react';\n\nimport '../components/HomeTile';\nimport './Home.css';\nimport HomeTile from \"../components/HomeTile\";\n\nclass Home extends Component {\n\n  componentDidMount() {\n\n  }\n\n  componentWillUnmount() {\n\n  }\n\n  render() {\n    return (\n      <div className=\"page-wrapper\">\n        <div className=\"grid-container\">\n          <HomeTile className=\"about\" name=\"ABOUT\"/>\n          <HomeTile className=\"projects\" name=\"PROJECTS\"/>\n          <HomeTile className=\"tech\" name=\"TECH\"/>\n          <HomeTile className=\"contact\" name=\"CONTACT\"/>\n          <HomeTile className=\"resume\" name=\"RESUME\"/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Tech extends Component {\n\n  componentDidMount() {\n\n  }\n\n  componentWillUnmount() {\n\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Tech</h1>\n        <Link to='/'>Link to Home</Link>\n      </div>\n    );\n  }\n}\n\nexport default Tech;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Work extends Component {\n\n  componentDidMount() {\n\n  }\n\n  componentWillUnmount() {\n\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Work</h1>\n        <Link to='/'>Link to Home</Link>\n      </div>\n    );\n  }\n}\n\nexport default Work;","import React, { Component } from 'react';\nimport { HashRouter, Route } from 'react-router-dom';\n\nimport About from '../screens/About';\nimport Contact from '../screens/Contact';\nimport Home from '../screens/Home';\nimport Tech from '../screens/Tech';\nimport Work from '../screens/Work';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <HashRouter>\n        <div>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/contact\" component={Contact} />\n          <Route path=\"/tech\" component={Tech} />\n          <Route path=\"/work\" component={Work} />\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}